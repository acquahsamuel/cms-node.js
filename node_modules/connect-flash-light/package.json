{
  "_from": "connect-flash-light",
  "_id": "connect-flash-light@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-7hpphf1xvw+zmC/z5hZzHUVOrlM=",
  "_location": "/connect-flash-light",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "connect-flash-light",
    "fetchSpec": "latest",
    "name": "connect-flash-light",
    "raw": "connect-flash-light",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-flash-light/-/connect-flash-light-1.0.0.tgz",
  "_shasum": "ee1a6985fd71bf0fb3982ff3e616731d454eae53",
  "_spec": "connect-flash-light",
  "_where": "/home/samuel_io/Documents/WEB ENGINEERING/Node Projects/cms",
  "author": {
    "email": "elliotfleming@gmail.com",
    "name": "Elliot Fleming",
    "url": "http://elliotfleming.com"
  },
  "bugs": {
    "url": "https://github.com/elliotfleming/connect-flash-light/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A dead simple approach to flash messaging middleware.",
  "devDependencies": {},
  "homepage": "https://github.com/elliotfleming/connect-flash-light",
  "keywords": [
    "connect",
    "express",
    "flash",
    "messages",
    "messaging"
  ],
  "license": {
    "type": "MIT",
    "url": "http://www.opensource.org/licenses/MIT"
  },
  "main": "./lib",
  "name": "connect-flash-light",
  "optionalDependencies": {},
  "readme": "# connect-flash-light\n\nThis is a dead simple approach to flashing data, connect-middleware style. It is completely unopinionated and highly-versatile. If you've got something you would like to live until the next request, this should do the trick.\n\n## Install\n\n    $ npm install connect-flash-light\n\n## Usage\n\n### Express 4.x\n\n`connect-flash-light` uses the session to store flash messages. So first, you will need to include the `session` middleware, which in turn requires the `cookieParser` middleware.\n\n```javascript\nvar express      = require('express');\nvar cookieParser = require('cookie-parser');\nvar session      = require('express-session');\nvar flash        = require('connect-flash-light');\n\nvar app = express();\n\napp.use(express.cookieParser());\napp.use(express.session());\napp.use(flash());\n```\n\nYou can now use the `req.flash()` function to flash whatever you would like. To set messages, use the format `req.flash(key, value)`. The value can be an valid JavaScript value. To retrieve a message, use the format `req.flash(key)`.\n\n#### A simple string value\n\n```javascript\napp.get('/flash', function(req, res) {\n  req.flash('msg', 'Your message was flashed!');\n  res.redirect('/');\n});\n\napp.get('/', function(req, res) {\n  res.render('index', { messages: req.flash('msg') });\n});\n```\n\n#### Form Handling\n\n```javascript\napp.post('/form', function(req, res) {\n  // Pass the user input back\n  req.flash('input', req.body);\n  // Namespace messages, instead of just a simple string\n  req.flash('msgs', {\n    forms: {\n      errors: {\n        'There was a form error!'\n      }\n    }\n  });\n  res.redirect('/form');\n});\n\napp.get('/form', function(req, res) {\n  var input = req.flash('input');\n  var msgs = req.flash('msgs');\n  res.render('form', {\n    input: input,\n    messages: msgs\n  });\n});\n```\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright 2014 Elliot Fleming <[http://elliotfleming.com](http://elliotfleming.com)>",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/elliotfleming/connect-flash-light.git"
  },
  "version": "1.0.0"
}
